class e extends Error{constructor(e,r,t,s){super(t),this.type=e,this.name="RequestError",this.title=r,this.original=s}toJSON(){return{name:this.name,type:this.type,title:this.title,message:this.message,stack:this.stack,original:this.original?{...this.original}:void 0}}}const r=new Map([[0,{title:"Unknown error",message:"Unhandled error, should not occur."}],[1,{title:"Key is empty",message:"Private key is empty in current request."}],[2,{title:"Incorrect Key",message:"Private key is wrong/incorrect format."}],[3,{title:"Wrong type",message:"Requesting an incorrect basic type."}],[4,{title:"Wrong fields",message:"Requesting incorrect selection fields."}],[5,{title:"Too many requests",message:"Current private key is banned for a small period of time because of too many requests (max 100 per minute)."}],[6,{title:"Incorrect ID",message:"Wrong ID value."}],[7,{title:"Incorrect ID-entity relation",message:"A requested selection is private (For example, personal data of another user / faction)."}],[8,{title:"IP block",message:"Current IP is banned for a small period of time because of abuse."}],[9,{title:"API disabled",message:"Api system is currently disabled."}],[10,{title:"Key owner is in federal jail",message:"Current key can't be used because owner is in federal jail."}],[11,{title:"Key change error",message:"You can only change your API key once every 60 seconds."}],[12,{title:"Key read error",message:"Error reading key from Database."}]]),t="https://api.torn.com";function s(s){const o=Date.now(),n=s.ids?s.ids.join(","):"",i=s.selections?s.selections.join(","):"",a=s.fetch||self.fetch,c=`${s.resource}/${n}`;let l=`selections=${i}&key=${s.key}&t=${Date.now()}`;return void 0!==s.from&&(l+=`&from=${s.from}`),void 0!==s.to&&(l+=`&to=${s.to}`),a(`${t}/${c}?${l}`).catch(r=>{throw new e("network-error","Network error","There was a network problem contacting Torn's API server",r)}).then(r=>{if(!r.ok)throw new e("response-error",`Server error: ${r.status}`,`${r.statusText}`);return r.json().catch(r=>{throw new e("server-error","Server error","Torn's API server responded with garbled data",r)})}).then(t=>{if(t.error){const s=r.get(t.error.code)||{title:"Unknown API error",message:"Torn's API server responded with an unknown error code"};throw new e("api-error",s.title,s.message)}return t.local_time_start=o,t.local_time_end=Date.now(),t})}class o{constructor(e,r){this.key=e,this.fetch_impl=r||self.fetch}request(e){return s(Object.assign({},e,{key:this.key,fetch:this.fetch_impl}))}}export{t as API_URL,o as Client,s as request};
